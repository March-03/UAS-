#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Struktur untuk representasi edge pada graf
struct Edge {
    int src, dest, weight;
};

// Struktur untuk representasi graf
struct Graph {
    int V, E;
    struct Edge* edge;
};

// Struktur untuk representasi subset untuk Union-Find
struct Subset {
    int parent;
    int rank;
};

// Membuat graf dengan V vertices dan E edges
struct Graph* createGraph(int V, int E) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*) malloc(graph->E * sizeof(struct Edge));
    return graph;
}

// Fungsi untuk mencari root dan melakukan path compression
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Fungsi untuk melakukan union dua subset
void Union(struct Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Fungsi perbandingan untuk sorting edge berdasarkan weight
int compareEdges(const void* a, const void* b) {
    struct Edge* edgeA = (struct Edge*)a;
    struct Edge* edgeB = (struct Edge*)b;
    return edgeA->weight > edgeB->weight;
}

// Algoritma Kruskal untuk mencari MST
void KruskalMST(struct Graph* graph) {
    int V = graph->V;
    struct Edge result[V];
    int e = 0; // indeks untuk result[]
    int i = 0; // indeks untuk edge yang diurutkan

    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), compareEdges);

    struct Subset* subsets = (struct Subset*) malloc(V * sizeof(struct Subset));

    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    while (e < V - 1 && i < graph->E) {
        struct Edge next_edge = graph->edge[i++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        if (x != y) {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }

    printf("Edges in the constructed MST:\n");
    for (i = 0; i < e; ++i)
        printf("%d -- %d == %d km\n", result[i].src, result[i].dest, result[i].weight);

    free(subsets);
}

int main() {
    int V = 6; // Jumlah vertex (Data center, Kantor1, Kantor2, Pemukiman1, Pemukiman2)
    int E = 7; // Jumlah edges yang valid (tidak termasuk 'Tidak ada jalur')
    struct Graph* graph = createGraph(V, E);

    // Definisi edges sesuai tabel
    graph->edge[0].src = 0; graph->edge[0].dest = 1; graph->edge[0].weight = 30;
    graph->edge[1].src = 0; graph->edge[1].dest = 2; graph->edge[1].weight = 20;
    graph->edge[2].src = 0; graph->edge[2].dest = 3; graph->edge[2].weight = 10;
    graph->edge[3].src = 1; graph->edge[3].dest = 3; graph->edge[3].weight = 5;
    graph->edge[4].src = 1; graph->edge[4].dest = 4; graph->edge[4].weight = 25;
    graph->edge[5].src = 2; graph->edge[5].dest = 3; graph->edge[5].weight = 13;
    graph->edge[6].src = 2; graph->edge[6].dest = 4; graph->edge[6].weight = 40;

    KruskalMST(graph);

    return 0;
}
